{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chaiy\\\\Desktop\\\\353-project\\\\frontend\\\\src\\\\Channel.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Message from './Message';\nimport axios from 'axios';\n/**\n * this component is for showing all the messages in this channel and allow user to create channel\n */\nimport \"./Style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Channel() {\n  _s();\n  // const { channelID, channel } = useParams();\n\n  const [posts, setPosts] = useState([]);\n  const [data, setData] = useState('');\n  // const [replies,setReplies] = useState([]);\n  const [image, setImage] = useState();\n  const [imagePreview, setImagePreview] = useState(null);\n  const refresh = async () => {\n    const res = await axios.get(\"http://localhost:3000/getposts\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(res);\n    setPosts(res.data.posts);\n  };\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  // const refresh  = () =>  {\n  //     fetch('http://localhost:3000/getposts')\n  //       .then(response => {\n  //         if (!response.ok) {\n  //           throw new Error('Network response was not ok');\n  //         }\n  //         return response.json();\n  //       })\n  //       .then(data => {\n  //         setPosts(data.posts)\n  //       })\n  //       .catch(error => {\n  //         console.error('There was a problem with the fetch operation:', error);\n\n  //       });\n  //   }; \n  const handleNewPost = async e => {\n    e.preventDefault();\n    const formdata = new FormData();\n    formdata.append(\"image\", image);\n    formdata.append(\"data\", data);\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const res = await axios.post('http://localhost:3000/addpost', formdata, config);\n    console.log(res);\n  };\n  // const handleNewImage =()=>{\n  //   const formdata  = new FormData();\n  //   formdata.append('image',image);\n  //   axios.post(\"http://localhost:3000/upload\",formdata)\n  //   .then(res=>{\n  //     if (res.data.Status === \"success\"){console.log(\"good job\")}\n  //     else{console.log(\"failed\")}\n  //   })\n  //   .catch(err=>console.log(err))\n\n  // }\n  // const getImage =()=>{\n  //   axios.get(\"http://localhost:3000/getposts\")\n  //   .then(res=>{setImage(res.image[0])})\n  //   .catch(err=>console.log(err))}\n\n  // const handleNewPost = () => {\n\n  //   fetch('http://localhost:3000/addpost', {\n  //     method: 'POST', \n  //     body: new URLSearchParams ({data:data}),\n  //     headers: {\n  //       'Content-Type': 'application/x-www-form-urlencoded'\n  //     },     \n  //   })\n  //   .then(response => {\n  //     if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //     }\n  //     return response.json();\n  // })\n  //   .then(alert(`new post added`))\n  //   .then(refresh())\n  //   .catch(error => console.error(error)) \n  //   setPosts([...posts,{data,image}])  \n  //   setData(\"\");\n  //   // setImage(null)\n  //   setImagePreview(null)\n\n  // }\n\n  const handleImageChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      setImage(file);\n      setImagePreview(URL.createObjectURL(file));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"you can post here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        placeholder: \"content\",\n        value: data,\n        onChange: e => setData(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this), imagePreview && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePreview,\n        alt: \"Preview\",\n        style: {\n          maxWidth: '200px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: handleNewPost,\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\"// \", /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"//    \", post.post, \"//    \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), \"//  \", post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: post.image,\n            style: {\n              maxWidth: '200px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 28\n          }, this), \"//  \", \"//    \", /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), \"// \"]\n        }, post.postID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 12\n        }, this), posts.map((el, i) => {\n          question: {\n            el.post;\n          }\n          image: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/images/${el.image}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 14\n  }, this);\n}\n_s(Channel, \"YUoMesk/zlOBUXJEzCO+tnFdjzA=\");\n_c = Channel;\nexport default Channel;\nvar _c;\n$RefreshReg$(_c, \"Channel\");","map":{"version":3,"names":["React","useState","useEffect","Message","axios","jsxDEV","_jsxDEV","Channel","_s","posts","setPosts","data","setData","image","setImage","imagePreview","setImagePreview","refresh","res","get","headers","console","log","handleNewPost","e","preventDefault","formdata","FormData","append","config","post","handleImageChange","event","target","files","file","URL","createObjectURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","src","alt","style","maxWidth","onClick","postID","map","el","i","question","_c","$RefreshReg$"],"sources":["C:/Users/chaiy/Desktop/353-project/frontend/src/Channel.js"],"sourcesContent":["import React from 'react';\nimport {useState,useEffect} from 'react';\nimport Message from './Message';\nimport axios from 'axios'\n/**\n * this component is for showing all the messages in this channel and allow user to create channel\n */\nimport \"./Style.css\"\nfunction Channel(){\n  // const { channelID, channel } = useParams();\n\n  const [posts, setPosts] = useState([]);\n  const [data, setData] = useState('');\n  // const [replies,setReplies] = useState([]);\n  const [image, setImage] = useState();\n  const [imagePreview, setImagePreview] = useState(null);\n\n\nconst refresh=async()=>{\n  const res = await axios.get(\"http://localhost:3000/getposts\",\n  {\n    headers:{\n      \"Content-Type\":\"application/json\"\n    }\n  }\n  );\n  console.log(res)\n  setPosts(res.data.posts)\n}\nuseEffect (()=>{\n  refresh();\n},[])\n\n// const refresh  = () =>  {\n//     fetch('http://localhost:3000/getposts')\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json();\n//       })\n//       .then(data => {\n//         setPosts(data.posts)\n//       })\n//       .catch(error => {\n//         console.error('There was a problem with the fetch operation:', error);\n        \n//       });\n//   }; \n  const handleNewPost=async(e)=>{\n    e.preventDefault();\n    const formdata = new FormData();\n    formdata.append(\"image\",image);\n    formdata.append(\"data\",data);\n\n    const config = {headers:{\n      \"Content-Type\":\"multipart/form-data\"\n    }}\n    const res = await axios.post('http://localhost:3000/addpost',formdata,config);\n    console.log(res);\n  }\n  // const handleNewImage =()=>{\n  //   const formdata  = new FormData();\n  //   formdata.append('image',image);\n  //   axios.post(\"http://localhost:3000/upload\",formdata)\n  //   .then(res=>{\n  //     if (res.data.Status === \"success\"){console.log(\"good job\")}\n  //     else{console.log(\"failed\")}\n  //   })\n  //   .catch(err=>console.log(err))\n\n  // }\n// const getImage =()=>{\n//   axios.get(\"http://localhost:3000/getposts\")\n//   .then(res=>{setImage(res.image[0])})\n//   .catch(err=>console.log(err))}\n\n\n  // const handleNewPost = () => {\n\n  //   fetch('http://localhost:3000/addpost', {\n  //     method: 'POST', \n  //     body: new URLSearchParams ({data:data}),\n  //     headers: {\n  //       'Content-Type': 'application/x-www-form-urlencoded'\n  //     },     \n  //   })\n  //   .then(response => {\n  //     if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //     }\n  //     return response.json();\n  // })\n  //   .then(alert(`new post added`))\n  //   .then(refresh())\n  //   .catch(error => console.error(error)) \n  //   setPosts([...posts,{data,image}])  \n  //   setData(\"\");\n  //   // setImage(null)\n  //   setImagePreview(null)\n    \n  // }\n\n\n  const handleImageChange = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      setImage(file);\n      setImagePreview(URL.createObjectURL(file));\n    }}\n\n\n  \n   \n    return ( <div className=\"container\">\n      <div className='form'>\n      <p>you can post here</p>\n      <br></br>\n   \n      <input className = \"input\"type=\"text\" placeholder=\"content\" value={data} \n      onChange={e => setData(e.target.value)} />  \n\n      <input type=\"file\" onChange={handleImageChange} />\n      {/* <button onClick={handleImageUpload}>upload</button> */}\n      {imagePreview && <img src={imagePreview} alt=\"Preview\" style={{ maxWidth: '200px' }} />}\n\n\n      <button className= \"button\"onClick={handleNewPost}>submit</button>\n\n\n      </div>\n   \n         <div className='container'>\n\n\n     <ul>\n      {/* {posts.map(post => ( */}\n        // <li key={post.postID}>\n        //    {post.post} \n        //    <br></br>\n        //  {post.image && <img src={post.image}  style={{ maxWidth: '200px' }} />}\n\n        //  {/* <img src={`images`+ post.image}></img> */}\n        //    <Message/>\n        // </li>\n        \n      \n      {/* ))} */}\n      {posts.map((el,i)=>{\n        question: {el.post}\n        image:  <img src ={`/images/${el.image}`}></img>\n      })}\n\n      \n    </ul> \n    </div>\n\n    \n  \n\n  </div>);\n\n}\nexport default Channel;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,EAACC,SAAS,QAAO,OAAO;AACxC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AACA,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACpB,SAASC,OAAOA,CAAA,EAAE;EAAAC,EAAA;EAChB;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC;EACA,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC;EACpC,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAGxD,MAAMgB,OAAO,GAAC,MAAAA,CAAA,KAAS;IACrB,MAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,gCAAgC,EAC5D;MACEC,OAAO,EAAC;QACN,cAAc,EAAC;MACjB;IACF,CACA,CAAC;IACDC,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC;IAChBR,QAAQ,CAACQ,GAAG,CAACP,IAAI,CAACF,KAAK,CAAC;EAC1B,CAAC;EACDP,SAAS,CAAE,MAAI;IACbe,OAAO,CAAC,CAAC;EACX,CAAC,EAAC,EAAE,CAAC;;EAEL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACE,MAAMM,aAAa,GAAC,MAAMC,CAAC,IAAG;IAC5BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAACf,KAAK,CAAC;IAC9Ba,QAAQ,CAACE,MAAM,CAAC,MAAM,EAACjB,IAAI,CAAC;IAE5B,MAAMkB,MAAM,GAAG;MAACT,OAAO,EAAC;QACtB,cAAc,EAAC;MACjB;IAAC,CAAC;IACF,MAAMF,GAAG,GAAG,MAAMd,KAAK,CAAC0B,IAAI,CAAC,+BAA+B,EAACJ,QAAQ,EAACG,MAAM,CAAC;IAC7ER,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC;EAClB,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACF;EACA;EACA;EACA;;EAGE;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAGA,MAAMa,iBAAiB,GAAIC,KAAK,IAAK;IACnC,IAAIA,KAAK,CAACC,MAAM,CAACC,KAAK,IAAIF,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MAC/C,MAAMC,IAAI,GAAGH,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClCpB,QAAQ,CAACqB,IAAI,CAAC;MACdnB,eAAe,CAACoB,GAAG,CAACC,eAAe,CAACF,IAAI,CAAC,CAAC;IAC5C;EAAC,CAAC;EAKF,oBAAS7B,OAAA;IAAKgC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACjCjC,OAAA;MAAKgC,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACrBjC,OAAA;QAAAiC,QAAA,EAAG;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACxBrC,OAAA;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAETrC,OAAA;QAAOgC,SAAS,EAAG,OAAO;QAAAM,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,SAAS;QAACC,KAAK,EAAEnC,IAAK;QACxEoC,QAAQ,EAAEvB,CAAC,IAAIZ,OAAO,CAACY,CAAC,CAACS,MAAM,CAACa,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE1CrC,OAAA;QAAOsC,IAAI,EAAC,MAAM;QAACG,QAAQ,EAAEhB;MAAkB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAEjD5B,YAAY,iBAAIT,OAAA;QAAK0C,GAAG,EAAEjC,YAAa;QAACkC,GAAG,EAAC,SAAS;QAACC,KAAK,EAAE;UAAEC,QAAQ,EAAE;QAAQ;MAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAGvFrC,OAAA;QAAQgC,SAAS,EAAE,QAAQ;QAAAc,OAAO,EAAE7B,aAAc;QAAAgB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAG7D,CAAC,eAEHrC,OAAA;MAAKgC,SAAS,EAAC,WAAW;MAAAC,QAAA,eAG9BjC,OAAA;QAAAiC,QAAA,GAC6B,KACvB,eAAAjC,OAAA;UAAAiC,QAAA,GAAsB,QACnB,EAACT,IAAI,CAACA,IAAI,EAAC,QACX,eAAAxB,OAAA;YAAAkC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,QACX,EAACb,IAAI,CAACjB,KAAK,iBAAIP,OAAA;YAAK0C,GAAG,EAAElB,IAAI,CAACjB,KAAM;YAAEqC,KAAK,EAAE;cAAEC,QAAQ,EAAE;YAAQ;UAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EAAC,MAEvE,EAA8C,QAC5C,eAAArC,OAAA,CAACH,OAAO;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,OACb;QAAA,GAPSb,IAAI,CAACuB,MAAM;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOhB,CAAC,EAITlC,KAAK,CAAC6C,GAAG,CAAC,CAACC,EAAE,EAACC,CAAC,KAAG;UACjBC,QAAQ,EAAE;YAACF,EAAE,CAACzB,IAAI;UAAA;UAClBjB,KAAK,EAAG,aAAAP,OAAA;YAAK0C,GAAG,EAAI,WAAUO,EAAE,CAAC1C,KAAM;UAAE;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAClD,CAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAKH,CAAC;AAER;AAACnC,EAAA,CA1JQD,OAAO;AAAAmD,EAAA,GAAPnD,OAAO;AA2JhB,eAAeA,OAAO;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}