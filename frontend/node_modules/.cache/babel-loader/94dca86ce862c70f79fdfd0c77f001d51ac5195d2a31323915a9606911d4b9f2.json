{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chaiy\\\\Desktop\\\\353-project\\\\frontend\\\\src\\\\Channels.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useDebugValue } from 'react';\nimport { Link } from 'react-router-dom'; // Import Link\nimport \"./Channels.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Channels = () => {\n  _s();\n  const [channels, setChannels] = useState([]);\n  const [newChannel, setNewChannel] = useState('');\n  // handle receive.\n\n  useEffect(() => {\n    fetch('http://localhost:3000/getChannels').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setChannels(data);\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n    });\n  }, []);\n  const createChannel = () => {\n    // console.log(\"New channel before fetch:\", newChannel); \n    fetch('http://localhost:3000/addNewChannel', {\n      method: 'POST',\n      body: new URLSearchParams({\n        newChannel: newChannel\n      }),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response.json()).then(alert(`new channel added`)).catch(error => console.error(error));\n    setNewChannel(\"\");\n    setChannels([...channels, newChannel]);\n    console.log(\" all the channels:\", channels);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Join the channels or create your own channel!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        placeholder: \"name your channel\",\n        value: newChannel,\n        onChange: e => setNewChannel(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: createChannel,\n        children: \"Create Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channels\",\n      children: channels.map(channel => /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: channel.newChannelName\n      }, channel.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 1\n  }, this);\n};\n_s(Channels, \"R+PPkMoQyobnlZd6wcpVOIsHaGg=\");\n_c = Channels;\nexport default Channels;\nvar _c;\n$RefreshReg$(_c, \"Channels\");","map":{"version":3,"names":["React","useState","useEffect","useDebugValue","Link","jsxDEV","_jsxDEV","Channels","_s","channels","setChannels","newChannel","setNewChannel","fetch","then","response","ok","Error","json","data","catch","error","console","createChannel","method","body","URLSearchParams","headers","alert","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","channel","newChannelName","ID","_c","$RefreshReg$"],"sources":["C:/Users/chaiy/Desktop/353-project/frontend/src/Channels.js"],"sourcesContent":["import React, { useState, useEffect, useDebugValue } from 'react';\r\nimport { Link } from 'react-router-dom'; // Import Link\r\nimport\"./Channels.css\"\r\nexport const Channels = () => {\r\n    const [channels,setChannels] = useState([]);\r\n    const [newChannel,setNewChannel] = useState('');\r\n    // handle receive.\r\n  \r\n    useEffect(() => {\r\n        fetch('http://localhost:3000/getChannels')\r\n          .then(response => {\r\n            if (!response.ok) {\r\n              throw new Error('Network response was not ok');\r\n            }\r\n            return response.json();\r\n          })\r\n          \r\n          .then(data => {\r\n            setChannels(data)\r\n          })    \r\n          .catch(error => {\r\n            console.error('There was a problem with the fetch operation:', error);\r\n            \r\n          });\r\n      }, []); \r\n\r\n\r\n      const createChannel = () => {\r\n        // console.log(\"New channel before fetch:\", newChannel); \r\n        fetch('http://localhost:3000/addNewChannel', {\r\n          method: 'POST', \r\n          body: new URLSearchParams ({newChannel : newChannel\r\n        }),\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n          },\r\n          \r\n        }).then(response => response.json())\r\n       \r\n        .then(alert(`new channel added`))\r\n        .catch(error => console.error(error)) \r\n         setNewChannel(\"\");\r\n        setChannels([...channels,newChannel])  \r\n        console.log(\" all the channels:\", channels); \r\n        \r\n        }\r\nreturn (\r\n    \r\n<div className=\"container\"> \r\n<div className='form' >\r\n<p>Join the channels or create your own channel!</p>\r\n\r\n   <input className=\"input\"type=\"text\" placeholder=\"name your channel\" value={newChannel} \r\n   onChange={(e) => setNewChannel(e.target.value)} />\r\n <button  className=\"button\"onClick={createChannel}>Create Channel</button>\r\n </div>   \r\n          \r\n<div className='channels'>\r\n \r\n\r\n{channels.map(channel => (\r\n        <ul key={channel.ID}>  \r\n          {/* <Link to={`/channels/${channel.ID}/${channel.channelname}`}>   </Link> */}\r\n          {channel.newChannelName}\r\n        </ul>\r\n      ))}\r\n</div>\r\n\r\n      \r\n\r\n\r\n</div>\r\n)\r\n\r\n\r\n}\r\nexport default Channels;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}