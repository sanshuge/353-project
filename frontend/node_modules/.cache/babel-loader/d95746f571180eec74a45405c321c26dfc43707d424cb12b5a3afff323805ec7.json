{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chaiy\\\\Desktop\\\\353-project\\\\frontend\\\\src\\\\Channels.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Import Link\nimport \"./Style.css\";\n\n/**\n * \n * this is channels component where user can see or create channel\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Channels = props => {\n  _s();\n  const [channels, setChannels] = useState([]);\n  const [newChannel, setNewChannel] = useState('');\n  useEffect(() => {\n    refresh();\n  }, []);\n  const refresh = () => {\n    fetch('http://localhost:3000/getChannels').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setChannels(data);\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n    });\n  };\n  const createChannel = () => {\n    // console.log(\"New channel before fetch:\", newChannel); \n    fetch('http://localhost:3000/addNewChannel', {\n      method: 'POST',\n      body: new URLSearchParams({\n        newChannel: newChannel\n      }),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response.json()).then(alert(`new channel added`)).then(refresh()).catch(error => console.error(error));\n    setNewChannel(\"\");\n    setChannels([...channels, newChannel]);\n    console.log(\" all the channels:\", channels);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Join the channels or create your own channel!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        placeholder: \"name your channel\",\n        value: newChannel,\n        onChange: e => setNewChannel(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: createChannel,\n        children: \"Create Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channels\",\n      children: channels.map(channel => /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/channels/${channel.channelID}/${channel.channel}`,\n          children: [\" \", channel.channel, \"       \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, channel.channelID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 1\n  }, this);\n};\n_s(Channels, \"R+PPkMoQyobnlZd6wcpVOIsHaGg=\");\n_c = Channels;\nexport default Channels;\nvar _c;\n$RefreshReg$(_c, \"Channels\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","Channels","props","_s","channels","setChannels","newChannel","setNewChannel","refresh","fetch","then","response","ok","Error","json","data","catch","error","console","createChannel","method","body","URLSearchParams","headers","alert","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","channel","to","channelID","_c","$RefreshReg$"],"sources":["C:/Users/chaiy/Desktop/353-project/frontend/src/Channels.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Import Link\nimport\"./Style.css\"\n\n\n/**\n * \n * this is channels component where user can see or create channel\n */\nexport const Channels = (props) => {\n    const [channels,setChannels] = useState([]);\n    const [newChannel,setNewChannel] = useState('');\n    useEffect(() => {\n      refresh();\n  }, []);\n\n\n    const refresh  = () =>  {\n        fetch('http://localhost:3000/getChannels')\n          .then(response => {\n            if (!response.ok) {\n              throw new Error('Network response was not ok');\n            }\n            return response.json();\n          })\n          \n          .then(data => {\n            setChannels(data)\n          })\n          \n          .catch(error => {\n            console.error('There was a problem with the fetch operation:', error);\n            \n          });\n      }; \n\n\n      const createChannel = () => {\n        // console.log(\"New channel before fetch:\", newChannel); \n        fetch('http://localhost:3000/addNewChannel', {\n          method: 'POST', \n          body: new URLSearchParams ({newChannel : newChannel\n        }),\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          \n        })\n      \n        .then(response => response.json())\n        .then(alert(`new channel added`))\n        .then(refresh())\n        .catch(error => console.error(error)) \n         setNewChannel(\"\");\n        setChannels([...channels,newChannel])  \n        console.log(\" all the channels:\", channels); \n        \n        }\n\nreturn (\n    \n<div className=\"container\">\n{/* <p>hello {props.user.username}</p> */}\n<div className='form'>\n<p>hello</p>\n<p>Join the channels or create your own channel!</p>\n\n<input className = \"input\"type=\"text\" placeholder=\"name your channel\" value={newChannel} \n   onChange={(e) => setNewChannel(e.target.value)} />\n <button className= \"button\"  onClick={createChannel}>Create Channel</button>\n</div>\n<div className='channels'>\n{channels.map(channel => (\n        <ul key={channel.channelID}>      \n          <Link to={`/channels/${channel.channelID}/${channel.channel}`}> {channel.channel}       </Link>\n        \n        </ul>\n      ))}\n   \n                </div>\n\n                </div>\n)\n\n\n}\nexport default Channels;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}