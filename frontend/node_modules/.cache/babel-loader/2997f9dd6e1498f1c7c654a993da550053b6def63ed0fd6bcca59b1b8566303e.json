{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chaiy\\\\Desktop\\\\353code\\\\frontend\\\\src\\\\Channels.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom'; // Import Link\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Channels = () => {\n  _s();\n  const [channels, setChannels] = useState([]);\n  const [newChannel, setNewChannel] = useState('');\n  useEffect(() => {\n    fetch('http://localhost:3000/getChannels').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setChannels(data);\n    }).catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n    });\n  }, []);\n  const createChannel = () => {\n    fetch('http://localhost:3000/addNewChannel', {\n      method: 'POST',\n      body: new URLSearchParams({\n        newChannel: newChannel\n      }),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(response => response.json()).then(alert(`new channel added`)).catch(error => console.error(error)).then(console.log(newChannel));\n    setNewChannel(\"\");\n    setChannels([...channels, {\n      newChannel\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"console.log(channels)\", channels.map(channel => /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\"channel:\", channel.channel, /*#__PURE__*/_jsxDEV(Link, {\n          to: `/channels/${channel.ID}/${channel.channel}`,\n          children: \"Go to this channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, channel.ID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"name your channel\",\n        value: newChannel,\n        onChange: e => setNewChannel(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createChannel,\n        children: \"Create Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 1\n  }, this);\n};\n_s(Channels, \"R+PPkMoQyobnlZd6wcpVOIsHaGg=\");\n_c = Channels;\nexport default Channels;\nvar _c;\n$RefreshReg$(_c, \"Channels\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","Channels","_s","channels","setChannels","newChannel","setNewChannel","fetch","then","response","ok","Error","json","data","catch","error","console","createChannel","method","body","URLSearchParams","headers","alert","log","className","children","map","channel","to","ID","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/chaiy/Desktop/353code/frontend/src/Channels.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Import Link\r\n\r\nexport const Channels = () => {\r\n    const [channels,setChannels] = useState([]);\r\n    const [newChannel,setNewChannel] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:3000/getChannels')\r\n          .then(response => {\r\n            if (!response.ok) {\r\n              throw new Error('Network response was not ok');\r\n            }\r\n            return response.json();\r\n          })\r\n          .then(data => {\r\n            setChannels(data)\r\n          })\r\n          \r\n          .catch(error => {\r\n            console.error('There was a problem with the fetch operation:', error);\r\n            \r\n          });\r\n      }, []); \r\n\r\n\r\n      const createChannel = () => {\r\n        fetch('http://localhost:3000/addNewChannel', {\r\n          method: 'POST', \r\n          body: new URLSearchParams ({newChannel : newChannel\r\n        }),\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n          },\r\n          \r\n        })\r\n      \r\n        .then(response => response.json())\r\n        .then(alert(`new channel added`))\r\n        .catch(error => console.error(error))  .then(console.log(newChannel))\r\n         setNewChannel(\"\");\r\n        setChannels([...channels,{newChannel}])  \r\n    \r\n        \r\n        }\r\n\r\nreturn (\r\n    \r\n<div className=\"App\">\r\n\r\n<div>\r\nconsole.log(channels)\r\n{channels.map(channel => (\r\n  \r\n        <ul key={channel.ID}>\r\n          \r\n        channel:{channel.channel}\r\n          \r\n          <Link to={`/channels/${channel.ID}/${channel.channel}`}>Go to this channel</Link>\r\n          \r\n\r\n        </ul>\r\n      ))}\r\n   <input type=\"text\" placeholder=\"name your channel\" value={newChannel} \r\n   onChange={(e) => setNewChannel(e.target.value)} />\r\n <button onClick={createChannel}>Create Channel</button>\r\n                </div>\r\n\r\n\r\n</div>)\r\n\r\n\r\n}\r\nexport default Channels;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}